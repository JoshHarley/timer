'''Program to create a basic timer'''

from tkinter import *
from tkinter import ttk
from tkinter import messagebox
import time
is_running = False



def input_check(num):
    try:    
        if str.isdigit(num):
            return True
        elif str.isalpha(num) or num == "" or len(num) < 1:
            messagebox.showerror(title = "Not A Number", message = "Input was not a valid number, please try again")
            timer_entry.delete(0, END)
            timer_entry.focus()
            return False
    except (TypeError, ValueError):
        messagebox.showerror(title = "Not a Number", message = "The value enter was not a valid number, please try again")
        timer_entry.delete(0, END)
        timer_entry.focus()
 
def countdown():
    root.update()
    try:
        new_time = int(timer_input.get())
    except (TypeError, ValueError):
        messagebox.showerror(title = "No Input", message = "The was no value entered, please try again")
        timer_entry.delete(0, END)
        timer_entry.focus()
    while new_time >= 0 and is_running:
        start.configure(state = DISABLED)
        timer_entry.configure(state = DISABLED)
        countdown_display.set(new_time)
        time.sleep(1)
        new_time -= 1
        root.update()
    start.configure(state = NORMAL)
    timer_entry.configure(state = NORMAL)
    timer_entry.delete(0, END)
    countdown_display.set("")

def stop_countdown():
    global is_running
    is_running = False

def start_countdown():
    global is_running
    is_running = True
    countdown()


def handle_enter(event):
    global is_running
    enter = frame.focus_get()
    if enter == timer_entry:
        is_running = True
        #countdown()

root = Tk()
root.title("Timer")
root.geometry("300x150+500+500")
root.bind("<Return>", handle_enter)
root.rowconfigure(0, weight = 1)
root.columnconfigure(0, weight = 1)


frame = ttk.Frame(root, padding = "3 3 12 12")
frame.grid(column = 0, row = 0, sticky = (N, E, S, W))
frame.columnconfigure(1, weight = 1)
frame.columnconfigure(2, weight = 1)
frame.rowconfigure(1, weight = 1)
frame.rowconfigure(2, weight = 1)
frame.rowconfigure(3, weight = 1)
frame.rowconfigure(4, weight = 1)
frame.rowconfigure(5, weight = 1)

i_check = frame.register(input_check)

timer_input = StringVar()
timer_entry = Entry(frame, textvariable = timer_input, validate = "key", validatecommand = (i_check, '%S'))
timer_entry.grid(column = 2, row = 1, sticky = (W, E))

timer_entry_label = Label(frame, text = "Enter time in seconds here: ")
timer_entry_label.grid(column = 1, row = 1, sticky = (W, E))

time_left_label = Label(frame, text = "Time Left: ")
time_left_label.grid(column = 1, row = 3, sticky = (W, E))

countdown_display = StringVar()
countdown_label = Label(frame, textvariable = countdown_display, font = "Times 40 bold")
countdown_label.grid(column = 1, row = 4, columnspan = 2, rowspan = 2, sticky = (W, E))    

start = Button(frame, text = "Start", command = start_countdown)
start.grid(column = 1, row = 2, sticky = (W, E))

stop = Button(frame, text = "Stop", command = stop_countdown)
stop.grid(column = 2, row = 2, sticky = (W, E))

for child in frame.winfo_children():
    child.grid_configure(padx = 5, pady = 1)

root.mainloop()
